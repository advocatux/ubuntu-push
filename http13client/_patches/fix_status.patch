=== modified file 'http13client/client.go'
--- http13client/client.go	2014-06-20 12:46:25 +0000
+++ http13client/client.go	2014-06-20 12:46:45 +0000
@@ -217,7 +217,7 @@
 // automatically redirect.
 func shouldRedirectGet(statusCode int) bool {
 	switch statusCode {
-	case StatusMovedPermanently, StatusFound, StatusSeeOther, StatusTemporaryRedirect:
+	case http.StatusMovedPermanently, http.StatusFound, http.StatusSeeOther, http.StatusTemporaryRedirect:
 		return true
 	}
 	return false
@@ -227,7 +227,7 @@
 // automatically redirect.
 func shouldRedirectPost(statusCode int) bool {
 	switch statusCode {
-	case StatusFound, StatusSeeOther:
+	case http.StatusFound, http.StatusSeeOther:
 		return true
 	}
 	return false

=== modified file 'http13client/client_test.go'
--- http13client/client_test.go	2014-06-20 12:46:25 +0000
+++ http13client/client_test.go	2014-06-20 12:46:45 +0000
@@ -204,7 +204,7 @@
 			}
 		}
 		if n < 15 {
-			http.Redirect(w, r, fmt.Sprintf("/?n=%d", n+1), StatusFound)
+			http.Redirect(w, r, fmt.Sprintf("/?n=%d", n+1), http.StatusFound)
 			return
 		}
 		fmt.Fprintf(w, "n=%d", n)
@@ -326,7 +326,7 @@
 	}
 	if r.URL.Path == "/" {
 		http.SetCookie(w, expectedCookies[1])
-		http.Redirect(w, r, "/second", StatusMovedPermanently)
+		http.Redirect(w, r, "/second", http.StatusMovedPermanently)
 	} else {
 		http.SetCookie(w, expectedCookies[2])
 		w.Write([]byte("hello"))
@@ -785,7 +785,7 @@
 	ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
 		if r.URL.Path == "/" {
 			sawRoot <- true
-			http.Redirect(w, r, "/slow", StatusFound)
+			http.Redirect(w, r, "/slow", http.StatusFound)
 			return
 		}
 		if r.URL.Path == "/slow" {
@@ -846,7 +846,7 @@
 	ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
 		saw <- r.RemoteAddr
 		if r.URL.Path == "/" {
-			http.Redirect(w, r, "/foo", StatusFound) // which includes a body
+			http.Redirect(w, r, "/foo", http.StatusFound) // which includes a body
 		}
 	}))
 	defer ts.Close()

=== modified file 'http13client/request_test.go'
--- http13client/request_test.go	2014-06-20 12:46:25 +0000
+++ http13client/request_test.go	2014-06-20 12:46:45 +0000
@@ -182,11 +182,11 @@
 		switch r.URL.Path {
 		case "/":
 			w.Header().Set("Location", "/foo/")
-			w.WriteHeader(StatusSeeOther)
+			w.WriteHeader(http.StatusSeeOther)
 		case "/foo/":
 			fmt.Fprintf(w, "foo")
 		default:
-			w.WriteHeader(StatusBadRequest)
+			w.WriteHeader(http.StatusBadRequest)
 		}
 	}))
 	defer ts.Close()

=== modified file 'http13client/response.go'
--- http13client/response.go	2014-06-20 12:46:25 +0000
+++ http13client/response.go	2014-06-20 12:46:45 +0000
@@ -205,9 +205,8 @@
 	// Status line
 	text := r.Status
 	if text == "" {
-		var ok bool
-		text, ok = statusText[r.StatusCode]
-		if !ok {
+		text = http.StatusText(r.StatusCode)
+		if text == "" {
 			text = "status code " + strconv.Itoa(r.StatusCode)
 		}
 	}

=== modified file 'http13client/responsewrite_test.go'
--- http13client/responsewrite_test.go	2014-06-20 12:46:25 +0000
+++ http13client/responsewrite_test.go	2014-06-20 12:47:05 +0000
@@ -197,7 +197,7 @@
 		// there were two.
 		{
 			Response{
-				StatusCode:       StatusOK,
+				StatusCode:       http.StatusOK,
 				ProtoMajor:       1,
 				ProtoMinor:       1,
 				Request:          &Request{Method: "POST"},

=== modified file 'http13client/transport_test.go'
--- http13client/transport_test.go	2014-06-20 12:46:25 +0000
+++ http13client/transport_test.go	2014-06-20 12:46:45 +0000
@@ -1004,7 +1004,7 @@
 	defer afterTest(t)
 	const deniedMsg = "sorry, denied."
 	ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
-		http.Error(w, deniedMsg, StatusUnauthorized)
+		http.Error(w, deniedMsg, http.StatusUnauthorized)
 	}))
 	defer ts.Close()
 	tr := &Transport{}
@@ -1028,7 +1028,7 @@
 func TestChunkedNoContent(t *testing.T) {
 	defer afterTest(t)
 	ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
-		w.WriteHeader(StatusNoContent)
+		w.WriteHeader(http.StatusNoContent)
 	}))
 	defer ts.Close()
 

